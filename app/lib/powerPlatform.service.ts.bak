import { PrismaClient } from '@prisma/client';
import { ClientSecretCredential } from '@azure/identity';
import { decrypt } from './encryption';

const prisma = new PrismaClient();

/**
 * Get a Power Platform API access token using the same credentials as Graph.
 * Reuses the Graph token if it has the right scope, otherwise requests a new one.
 * #microsoft.docs.mcp
 */
export async function getPowerPlatformAccessToken(): Promise<string> {
  // Try to get credentials from config (same as graph.service.ts)
  const config = await prisma.configuration.findUnique({ where: { id: 1 } });
  if (!config) throw new Error('Configuration not found. Please set credentials first.');
  const { tenantId, clientId, clientSecret } = config;
  if (!clientSecret) throw new Error('Client secret is not set.');
  const decryptedSecret = decrypt(clientSecret);
  const credential = new ClientSecretCredential(tenantId, clientId, decryptedSecret);
  // Power Platform Admin API scope
  const scope = 'https://api.bap.microsoft.com/.default';
  const token = await credential.getToken(scope);
  if (!token || !token.token) throw new Error('Failed to obtain Power Platform API token');
  return token.token;
}

export async function fetchPowerPlatformEnvironments(accessToken: string) {
  const url = 'https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/scopes/admin/environments?api-version=2020-10-01&$expand=properties.capacity,properties.addons';
  console.log(`[PowerPlatform] GET ${url}`);
  const res = await fetch(url, {
    headers: { Authorization: `Bearer ${accessToken}` }
  });
  console.log(`[PowerPlatform] Response: ${res.status} ${res.statusText}`);
  if (!res.ok) {
    const text = await res.text();
    console.error(`[PowerPlatform] Error body: ${text}`);
    throw new Error(`Failed to fetch environments: ${res.status}`);
  }
  return (await res.json()).value;
}

export async function fetchPowerAppsForEnvironment(environmentId: string, accessToken: string) {
  const url = `https://${environmentId}.environment.api.powerplatform.com/powerapps/apps?api-version=1`;
  console.log(`[PowerPlatform] GET ${url}`);
  const res = await fetch(url, {
    headers: { Authorization: `Bearer ${accessToken}` }
  });
  console.log(`[PowerPlatform] Response: ${res.status} ${res.statusText}`);
  if (!res.ok) {
    const text = await res.text();
    console.error(`[PowerPlatform] Error body: ${text}`);
    throw new Error(`Failed to fetch PowerApps for environment ${environmentId}: ${res.status}`);
  }
  return (await res.json()).value;
}

export async function fetchFlowsForEnvironment(environmentId: string, region: string, accessToken: string) {
  const url = `https://${region}.api.flow.microsoft.com/providers/Microsoft.ProcessSimple/environments/${environmentId}/flows?api-version=2016-11-01`;
  console.log(`[PowerPlatform] GET ${url}`);
  const res = await fetch(url, {
    headers: { Authorization: `Bearer ${accessToken}` }
  });
  console.log(`[PowerPlatform] Response: ${res.status} ${res.statusText}`);
  if (!res.ok) {
    const text = await res.text();
    console.error(`[PowerPlatform] Error body: ${text}`);
    throw new Error(`Failed to fetch Flows for environment ${environmentId}: ${res.status}`);
  }
  return (await res.json()).value;
}

export async function resolveUserIdToDisplayName(userId: string, graphAccessToken: string) {
  // GET https://graph.microsoft.com/v1.0/users/{userId}
  // ...
}
